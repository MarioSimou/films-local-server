service: 'songs-local-server-backend'

frameworkVersion: '3'
plugins:
  - serverless-esbuild
  - serverless-offline

useDotenv: true

params:
  dev:
    songsTableName: ${self:service}-songs-dev
    assetsBucketName: ${self:service}-asssets-bucket-dev
    webAppBucketName: www.songs-webapp-dev.com
    allowOrigin: '*'
  prod:
    songsTableName: ${self:service}-songs-prod
    assetsBucketName: ${self:service}-assets-bucket-prod
    webAppBucketName: www.songs-webapp-prod.com
    allowOrigin: !GetAtt WebAppBucket.WebsiteURL
provider:
  name: 'aws'
  runtime: 'nodejs14.x'
  memorySize: 128
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    AWS_STAGE: ${sls:stage}
    AWS_DYNAMODB_SONGS_TABLE_NAME: ${param:songsTableName}
    AWS_S3_BUCKET_NAME: ${param:assetsBucketName}
    ALLOW_ORIGIN: ${param:allowOrigin}
    NODE_OPTIONS: '--enable-source-maps --stack-trace-limit=1000'
    AUTH0_DOMAIN: ${env:AUTH0_DOMAIN}
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
    binaryMediaTypes:
      - 'multipart/form-data'
  iam:
    role: !GetAtt BasicRole.Arn 

package:
  individually: true
custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude:
      - aws-sdk
    target: node14
    platform: node
    concurrency: 10

functions:
  GetSongs:
    handler: ./src/functions/index.getSongs
    events:
      - http:
          method: GET
          path: /api/v1/songs
  GetSong:
    handler: ./src/functions/index.getSong
    events:
      - http:
          method: GET
          path: /api/v1/songs/{guid}
  PostSong:
    handler: ./src/functions/index.postSong
    events:
      - http:
          method: POST
          path: /api/v1/songs
  PutSong:
    handler: ./src/functions/index.putSong
    events:
      - http:
          method: PUT
          path: /api/v1/songs/{guid}
  PutImageSong:
    handler: ./src/functions/index.putImageSong
    events:
      - http:
          method: PUT
          path: /api/v1/songs/{guid}/image
  UploadSong:
    handler: ./src/functions/index.uploadSong
    events:
      - http:
          method: PUT
          path: /api/v1/songs/{guid}/upload
  DeleteSong:
    handler: ./src/functions/index.deleteSong
    events:
      - http:
          method: DELETE
          path: /api/v1/songs/{guid}

resources:
  Resources:      
    BasicRole:
      Type: AWS::IAM::Role
      Properties:
        Description: Role used by lambda function to manage business logic
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action: 
              - sts:AssumeRole
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
        Policies:
          - PolicyName: BasicRolePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Resource: '*'
                  Action:
                    - 's3:GetObject'
                    - 's3:GetObjectAcl'
                    - 's3:PutObject'
                    - 's3:PutObjectAcl'
                    - 's3:DeleteObject'
                    - 's3:ListBucket'
                    - 'dynamodb:GetItem'
                    - 'dynamodb:DescribeTable'
                    - 'dynamodb:Scan'
                    - 'dynamodb:PutItem'
                    - 'dynamodb:DeleteItem'
                    - 'lambda:InvokeFunction'
                    - 'logs:CreateLogStream'
                    - 'logs:CreateLogGroup'
                    - 'logs:PutLogEvents'
        Tags:
          - Key: env
            Value: ${sls:stage}
    SongsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${param:songsTableName}
        AttributeDefinitions:
          - AttributeName: guid
            AttributeType: S
        KeySchema:
          - AttributeName: guid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3
        Tags:
          - Key: env
            Value: ${sls:stage}
    AssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${param:assetsBucketName}
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
              AllowedOrigins:
                - !GetAtt WebAppBucket.WebsiteURL
              MaxAge: 86400
        Tags:
          - Key: env
            Value: ${sls:stage}
    AssetsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AssetsBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
              - 's3:GetObject'
              Effect: Allow
              Principal: '*'
              Resource: !Join ['', [ !GetAtt AssetsBucket.Arn, '/*']]
    WebAppBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${param:webAppBucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: 404.html
        VersioningConfiguration:
          Status: Enabled
        Tags:
          - Key: env
            Value: ${sls:stage}
    WebAppBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebAppBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
              - 's3:GetObject'
              Effect: Allow
              Principal: '*'
              Resource: !Join ['', [!GetAtt WebAppBucket.Arn, '/*']]
  Outputs:
    WebAppURL:
      Value: !GetAtt WebAppBucket.WebsiteURL
    AssetsBucketDomain:
      Value: !GetAtt AssetsBucket.RegionalDomainName