service: songs-local-server-sls

plugins:
  - serverless-offline

frameworkVersion: '3'
useDotenv: true

params:
  default:
    bucketName: ${self:service}-bucket-${sls:stage}
    dybamodbTableName: ${self:service}-songs

provider:
  name: aws
  runtime: go1.x
  region: ${env:AWS_DEFAULT_REGION, "us-east-1"}
  versionFunctions: false
  environment:
    AWS_S3_BUCKET_NAME: ${param:bucketName}
    AWS_DYNAMODB_TABLE_NAME: ${param:dybamodbTableName}
    AWS_ENDPOINT: ${env:AWS_ENDPOINT}
    AWS_ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}
    AWS_DEFAULT_REGION: ${self:provider.region}
  iam:
    role: !GetAtt LambdaRole.Arn

package:
  patterns:
    - '!./**'
    - ./bin/**

functions:
  getSongs:
    handler: bin/getSongs
    events:
      - httpApi:
          path: /api/v1/songs
          method: GET
  getSong:
    handler: bin/getSong
    events:
      - httpApi:
          path: /api/v1/songs/{guid}
          method: GET
  postSong:
    handler: bin/postSong
    events:
      - httpApi:
          path: /api/v1/songs
          method: POST
  putSong:
    handler: bin/putSong
    events:
      - httpApi:
          path: /api/v1/songs/{guid}
          method: PUT
  deleteSong:
    handler: bin/deleteSong
    events:
      - httpApi:
          path: /api/v1/songs/{guid}
          method: DELETE
  # putSongImage:
  #   handler: bin/putSongImage
  #   events:
  #     - httpApi:
  #         path: /api/v1/songs/{guid}/image
  #         method: PUT
  # uploadSong:
  #   handler: bin/uploadSong
  #   events:
  #     - httpApi:
  #         path: /api/v1/songs/{guid}/upload
  #         method: PUT

resources:
  Resources:
      LambdaRole:
        Type: AWS::IAM::Role
        Properties:
          RoleName: ${self:service}-lambda-role
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: sid
                Effect: Allow
                Action:
                  - sts:AssumeRole
                Principal:
                  Service:
                    - lambda.amazonaws.com
          Policies:
            - PolicyName: ${self:service}-lambda-role-policy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Resource: '*'
                    Action:
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                      - lambda:InvokeFunction
                      - s3:GetObject
                      - s3:PutObject
                      - s3:DeleteObject
                      - s3:ListBucket
                      - dynamodb:GetItem
                      - dynamodb:Scan
                      - dynamodb:PutItem
                      - dynamodb:DeleteItem

      SongsTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: ${param:dybamodbTableName}
          KeySchema:
            - AttributeName: GUID
              KeyType: HASH
          AttributeDefinitions:
            - AttributeName: GUID
              AttributeType: S
          BillingMode: PAY_PER_REQUEST
      S3Bucket:
        Type: AWS::S3::Bucket
        Properties:
          BucketName: ${param:bucketName}
          AccessControl: PublicRead
      S3BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
          Bucket: !Ref S3Bucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: sid
                Effect: Deny
                Principal: '*'
                Action:
                  - 's3:*'
                Resource:
                  - arn:aws:s3:::${param:bucketName}/*