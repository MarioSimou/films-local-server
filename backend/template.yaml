AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  AWSS3Endpoint:
    Type: String
    Default: ''
  AWSDynamoDBEndpoint: 
    Type: String
    Default: ''

Globals:
  Function:
    Runtime: go1.x
    MemorySize: 128 
    Timeout: 20
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        AWS_S3_ENDPOINT: !Ref AWSS3Endpoint
        AWS_DYNAMODB_ENDPOINT: !Ref AWSDynamoDBEndpoint
  Api:
    BinaryMediaTypes: ['multipart/form-data']
    Cors:
      AllowOrigin: "'http://localhost:8080'"
      AllowHeaders: "'Content-Type'"
      AllowMethods: "'GET,PUT,POST,DELETE,OPTIONS'"
  
Resources:
  ProjectRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: songs-backend-admin-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com
                - apigateway.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: songs-backend-role-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - lambda:InvokeFunction
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:DescribeTable
                  - dynamodb:UpdateTable
                  - dynamodb:Scan
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:GetObjectAcl
                  - s3:PutObject
                  - s3:ListBucket
                Effect: Allow
                Resource: '*'
  SongsBackendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: songs-backend-bucket
      AccessControl: Private
      VersioningConfiguration:
        Status: Suspended
  SongsBackendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SongsBackendBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${SongsBackendBucket}/*'
            Principal: '*'
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Description: CRUD Rest API connected with the lambda functions
      StageName: !Ref Environment
      OpenApiVersion: 3.0.3
      
  SongsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: songs
      PrimaryKey:
          Name: GUID
          Type: String

  PostSong:
    Type: AWS::Serverless::Function
    Properties:
      Description: Used to create a new song entry
      CodeUri: functions/postSong
      Handler: main
      Role: !GetAtt ProjectRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Method: POST
            Path: /api/v1/songs
            RestApiId:
                Ref: RestApi
  GetSongs:
    Type: AWS::Serverless::Function
    Properties:
      Description: Used to get the songs
      CodeUri: functions/getSongs
      Handler: main
      Role: !GetAtt ProjectRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /api/v1/songs
            Method: GET
            RestApiId:
              Ref: RestApi
  GetSong:
    Type: AWS::Serverless::Function
    Properties:
      Description: Used to get a single song
      CodeUri: functions/getSong
      Handler: main
      Role: !GetAtt ProjectRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /api/v1/songs/{guid}
            Method: GET
            RestApiId:
              Ref: RestApi
  DeleteSong:
    Type: AWS::Serverless::Function
    Properties:
      Description: Used to delete a song
      Handler: main
      CodeUri: functions/deleteSong
      Role: !GetAtt ProjectRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /api/v1/songs/{guid}
            Method: DELETE
            RestApiId:
              Ref: RestApi
  PutSong:
    Type: AWS::Serverless::Function
    Properties:
      Description: Used to update a song
      Handler: main
      CodeUri: functions/putSong
      Role: !GetAtt ProjectRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /api/v1/songs/{guid}
            Method: PUT
            RestApiId:
              Ref: RestApi
  UploadSong:
    Type: AWS::Serverless::Function
    Properties:
      Description: Upload a song to an s3 bucket
      Handler: main
      CodeUri: functions/uploadSong
      Role: !GetAtt ProjectRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /api/v1/songs/{guid}/upload
            Method: PUT
            RestApiId:
              Ref: RestApi
  PutSongImage:
        Type: AWS::Serverless::Function
        Properties:
          Description: Upload an image of a particular song
          Handler: main
          CodeUri: functions/putSongImage
          Role: !GetAtt ProjectRole.Arn
          Events:
            ApiEvent:
              Type: Api
              Properties:
                Path: /api/v1/songs/{guid}/image
                Method: PUT
                RestApiId:
                  Ref: RestApi
  DeleteSongImage:
      Type: AWS::Serverless::Function
      Properties:
        Description: Delete an image of a particular song
        Handler: main
        CodeUri: functions/deleteSongImage
        Role: !GetAtt ProjectRole.Arn
        Events:
          ApiEvent:
            Type: Api
            Properties:
              Path: /api/v1/songs/{guid}/image
              Method: DELETE
              RestApiId:
                Ref: RestApi

Outputs:
  ProjectRoleName:
    Value: !Ref ProjectRole
  ProjectRoleArn:
    Value: !GetAtt ProjectRole.Arn
  SongsTableId:
    Description: Songs table id
    Value: !Ref SongsTable
  BucketDomain:
    Value: !GetAtt SongsBackendBucket.DomainName
  BucketRegionalDomain:
    Value: !GetAtt SongsBackendBucket.RegionalDomainName
  BucketWebsiteURL:
    Value: !GetAtt SongsBackendBucket.WebsiteURL
  APIEndpointId:
    Description: endpoint id
    Value: !Ref RestApi
  APIEndpointProd:
    Description: prod endpoint
    Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod'